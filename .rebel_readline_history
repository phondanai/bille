1624118042265:(.-value (.target %))
1624118236146:@celsius-v
1624118244942:(js/alert "WHAT")
1624118267696:basic.core/celsius-v
1624118269911:@basic.core/celsius-v
1624118281545:(reset! basic.core/celsius-v 20)
1624119007254:getTime
1624119011761:(.getTime)
1624119018706:(js/Date.)
1624119030884:(.getTime (js/Date.))
1624121322516:(reduce + 0 [5 10 3 7])
1627980620782:(ns basic.core)
1627980626888:@items
1627980654914:(for [item @items]\n  (println item))
1627980666606:(for [item @items]\n  (println (:id item)))
1627980730363:(defn item-item []\n  (fn [{:keys [id item price]}]\n    [:tr\n     [:td item]\n     [:td price]]))
1627980742721:(for [item @items]\n  (item-item item)))
1627980749535:(for [item @items]\n  (item-item item))
1627980755940:item-item
1627980767395:(item-item\n )
1627980789083:(for [item @items]\n  (item-item item))
1627980797571:(for [item @items]\n  ((item-item item)))
1627980867692:(for [item @items]\n  (item-item item))
1627980878356:(for [item @items]\n  [item-item item])
1627980890357:(for [item @items]\n  ([item-item item]))
1627980893125:(for [item @items]\n  [item-item item])
1627981012002:(.log js/console "HELO")
1627981032781:(.log js/console @items)
1627981050659:(.log js/console (:id @items))
1627981056929:(.log js/console @items)
1627981069611:(.log js/console (first @items))
1627981077756:(.log js/console (:item (first @items)))
1627981087818:(.log js/console (:price\n                  (first @items)))
1627981097803:(.log js/console (first @items))
1627981103705:(.log js/console (str (first @items)))
1627982778907:(defn assoc-query-params\n  "Parse and assoc parameters from the query string with the request."\n  {:added "1.3"}\n  [request encoding]\n  (merge-with merge request\n    (if-let [query-string (:query-string request)]\n      (let [params (parse-params query-string encoding)]\n        {:query-params params, :params params})\n      {:query-params {}, :params {}})))
1627982796004:(defn- parse-params [params encoding]\n  (let [params (codec/form-decode params encoding)]\n    (if (map? params) params {})))
1627983042702:(defn parse-params\n  "Parse URL parameters into a hashmap"\n  []\n  (let [param-strs (-> (.-location js/window) (split #"\\?") last (split #"\\&"))]\n    (into {} (for [[k v] (map #(split % #"=") param-strs)]\n               [(keyword k) v]))))
1627983058753:split
1627985739594:(def qry "?เนื้อ=120&โค้ก=260")
1627985744841:(split qry)
1627986066613:(require '[clojure.string] :as str)
1627986077934:(:\n  require '[clojure.string] :as str)
1627986083657:(:require '[clojure.string] :as str)
1627986087260:str
1627986113015:(str/split qry "\\&")
1627986121955:(str/split qry "&")
1627986126979:(str/split qry "?")
1627986193524:qry
1627986359184:(into {} (for [[k v] (map #(str/split % #"=") qry)]\n           [(keyword k) v]))
1627986365640:str
1627986389775:(require '[clojure.string :only [split])
1627986396852:(require '[clojure.string :only [split]])
1627986404432:(:require '[clojure.string :only [split]])
1627986414779:(into {} (for [[k v] (map #(split % #"=") qry)]\n           [(keyword k) v]))
1627986420749:qry
1627986446445:(def qry "?เนื้อ=120&โค้ก=260")
1627986447612:qry
1627986450469:(into {} (for [[k v] (map #(split % #"=") qry)]\n           [(keyword k) v]))
1627986460083:split
1627986463925:(split\n )
1627986470372:(:require '[clojure.string :only [split]])
1627986472804:split
1627986482487:(:require '[clojure.string :refer [split]])
1627986483769:split
1627986509146:(:require '[clojure.string :as str])
1627986510215:str
1627986512047:str/split
1627986536635:(require '[clojure.string :as str])
1627986539715:str/split
1627986553274:(require '[clojure.string :refer [split\n                                  ]])\\
1627986555364:split
1627986562261:(require '[clojure.string :refer [split]])
1627986563444:split
1627986568458:(into {} (for [[k v] (map #(split % #"=") qry)]\n           [(keyword k) v]))
1627986605875:(split qry #"=")
1627986650388:(-> qry (split #"\\?") last (split #"\\&"))
1627987419458:items
1627987435996:(def items {:เนื้อ "120", :โค้ก 260})
1627987437560:items
1627987448797:for [[k v] items]
1627987461683:(for [[k v] items]\n  (println k v))
1627987669143:add-item
1627988107302:(.log js/console "HELO")
1627988312016:basic/core
1627988498460:basic/core.parse-params
1627988503331:(basic/core.parse-params)
1627988578391:basic/core.parse-params
1627988581006:basic/core
1627988617689:(basic/core.parse-params)
1627988668231:basic/core
1627988811736:(basic/core.parse-params)
1627988816870:(vals (basic/core.parse-params))
1627988823096:(some? (vals (basic/core.parse-params)))
1627988831136:(nil? (vals (basic/core.parse-params)))
1627988841493:(vals (basic/core.parse-params))
1627988850864:(basic/core.parse-params)
1627988857460:(def returns (basic/core.parse-params))
1627988858560:returns
1627988862727:(val returns)
1627988870191:(vals returns)
1627988874392:(nil? (vals returns))
1627988887933:(class returns)
1627988898777:(type returns)
1627988936414:basic/core
1627988984457:(basic/core.parse-params)
1627988994983:basic/core
1627989079438:(basic/core.parse-params)
1627989085359:(sorted-map (basic/core.parse-params))
1627989142902:(basic/core.parse-params)
1627989149922:basic/core
1627989244704:(basic/core.parse-params)
1627989261474:(type (vals (basic/core.parse-params)))
1627989273899:(first (type (vals (basic/core.parse-params))))
1627989280883:(first (vals (basic/core.parse-params))))
1627989293870:(basic/core.parse-params)
1627989298139:(vals (basic/core.parse-params))
1627989302122:(pop (vals (basic/core.parse-params)))
1627989307919:(first (vals (basic/core.parse-params)))
1627989370773:(basic/core.parse-params)
1627989478363:basic/core
1627989721066:(basic/core.parse-params)
1627989765168:basic/core
1627989919362:basic/core.items
1627989931278:(basic/core.parse-params)
1627990544938:basic/core.items
1627990548209:basic/core
1627995308789:basic/core.parse-params
1627995367382:basic/core
1627995370653:basic/core.parse-params
1627995374544:(basic/core.parse-params)
1627995486895:basic/core
1627996267171:(let [[k v] {"ชอค" 40}]\n  (println k v))
1627996296713:(let [k v {"ชอค" 40}]\n  (println k v))
1627996632290:(basic/core.parse-params)
1627996926695:items
1627996932933:basic/core.items
1627996936833:@basic/core.items
1627996939180:basic/core.items
1627996944166:basic/core.@items
1627996947660:basic/@core.items
1627996948987:basic/core.@items
1627996954126:basic/core.items
1627997105776:basic/core.
1627997106756:basic/core
1627997147803:basic/core.add-item-params
1627997156116:(basic/core.add-item-params)
1627997211859:basic/core
1627997220649:(basic/core.add-item-params)
1627997238242:basic/core.items
1627997244494:(vals basic/core.items)
1627997246702:basic/core.items
1627997290701:(basic/core.add-item-params)
1627997295680:basic/core.items
1628006783629:basic/core
1628006794210:basic/core.items
1628006863488:basic/core
1628006865392:basic/core.items
1628006884997:(basic/core.add-item-params)
1628007086425:basic/core.items
1628007089133:basic/core
1628007163043:(map inc [[10 20] [10 2]])
1628007184279:(map inc [10 20]\n     )
1628007216602:basic/core.items
1628007462646:(into (sorted-map) {{:a :a :b :b}})
1628007472752:(into (sorted-map) [{:a :a :b :b}]\n      )
1628007576872:(basic/core.parse-params)
1628007626154:(keyword "belle")
1628007628949:(str (keyword "belle"))
1628007676675:(name\n (keyword "belle"))
1628007825402:(basic/core.parse-params)
1628007831125:basic/core.items
1628007882823:basic/core
1628008084280:basic/core.items
1628008137078:basic/core
1628008138737:basic/core.items
1628008146770:(:val basic/core.items)
1628008154869:(\n val basic/core.items)
1628008157782:(val basic/core.items)
1628008163115:(vals basic/core.items)
1628008172032:@basic/core.items
1628008174960:basic/core.items
1628008191597:(type basic/core.items)
1628008208345:(vals @basic/core.items)
1628008389427:basic/core
1628009629493:basic/core.items2
1628009693741:basic/core.items
1628009701713:basic/core.items2
1628009757906:basic/core.items
1628009869843:(sorted-map [:f 30])
1628009890663:(sorted-map [:f] [3]\n            )
1628009906982:(sorted-map [[:f] 30])
1628009924949:(sorted-map {:f} 30)
1628009939438:(sorted-map {:item :belle} {:price 30})
1628009958899:basic/core.items
1628009971155:(basic/core.parse-params)
1628009973242:basic/core.items
1628009975512:(sorted-map {:item :belle} {:price 30})
1628009992525:(merge (sorted-map {:item :belle} {:price 30}))
1628010110879:basic/core.items
1628010127063:basic/core.items2
1628010156919:(vals @basic/core.items2)
1628010528049:basic/core.items2
1628010535843:(map hash-map basic/core.items2)
1628010545426:(map (hash-map) @basic/core.items2)
1628010550421:(map hash-map @basic/core.items2)
1628010590969:basic/core.items2
1628010601560:(map hash-map @basic/core.items2)
1628010607074:basic/core.items2
1628010611296:(map hash-map @basic/core.items2)
1628010613550:basic/core.items2
1628010614631:(map hash-map @basic/core.items2)
1628010620774:basic/core.items2
1628010660542:basic/core.items
1628010791745:basic/core.items2
1628010823193:basic/core.items
1628010824699:basic/core.items2
1628062807969:basic/core
1628062839071:basic/core.item
1628062842218:basic/core.items
1628062847018:basic/core
1628062848470:basic/core.items
1628062900141:basic/core
1628063417981:basic/core.items
1628063444782:basic/core
1628063447271:basic/core.items
